{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+","tags":false},"docs":[{"location":"","text":"","title":"Introduction"},{"location":"#welcome-to-trinsic","text":"<p>Trinsic is a developer platform to exchange verifiable credentials.</p> <p>Verifiable Credentials transform credentials, licenses, passes, and certificates into a W3C standard format that can be exchanged digitally and verified instantly. Unlike a paper document or html form, when information from a verifiable credential is shared, it can be instantly proven to be authentic.</p> <p>They require no centralized authority or proprietary technology to use - verifiable credentials are built on interoperable standards  designed to be open, privacy-preserving, and distributed like the internet itself.</p> <p>Hundreds of organizations of all sizes and industries use Trinsic\u2019s infrastructure and tools to instantly verify information about individuals with technology instead of paper. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD =======</p>","title":"Welcome to Trinsic"},{"location":"#available-sdks","text":"<ul> <li> C#<ul> <li> Mobile (Xamarin, MAUI)</li> <li> .NET Core (MacOS, Windows, Linux)</li> <li> Web Assembly (Blazor)</li> </ul> </li> <li> TypeScript/JS<ul> <li> Node.js</li> <li> Browser</li> </ul> </li> <li> Python</li> <li> Go</li> <li> Rust</li> <li> Swift (iOS)</li> <li> Java/Kotlin (Android)</li> </ul>","title":"Available SDKs"},{"location":"#up-next","text":"<ul> <li> React Native</li> </ul> <p>Next: Learn the Concepts</p>","title":"Up Next"},{"location":"early-adopter/","text":"<p>For organizations ready to deploy verifiable credentials into a complex industry or use case, Trinsic has prepared tools to help you do so.</p> <p>To learn more about Trinsic Ecosystems, read our announcement about it:</p> <p>Announcing Trinsic Ecosystems</p>","title":"Introducing Trinsic Ecosystems"},{"location":"concepts/","text":"<p>Trinsic is a set of tools and infrastructure that enables decentralized identity for individuals and organizations.</p> <p>There are many ways that decentralized identity can be used beyond just customer login. This enables digital identity verification anywhere. In person, online, even offline.</p>","title":"Concepts"},{"location":"concepts/#wallets","text":"<p>Wallets can be thought of a little like an email inbox. Wallets exist to send, receive and store credentials. Wallets can be hosted by anyone. Each wallet can only be accessed by a set of keys stored on devices.</p>","title":"Wallets"},{"location":"concepts/#credentials","text":"<p>Organizations and governments across the world have converged on a digital identity document standard called Verifiable Credentials.</p> <p>Trinsic's platform covers the full credential lifecycle. Our tools help you create, issue, verify, revoke, and store these credentials. These pieces are meant to be modular and interoperable.</p> <p>Verifiable Credentials are a way of representing documents online that make them interoperable and instantly verifiable. In its technical sense, a credential is a set of one or more cryptographically verifiable assertions about a subject made by an entity.</p> <p>Just like passports and drivers licenses today have interoperability components like their barcode, credentials have the same feature but are built into the internet itself, and can be used anywhere it is supported. Our tools let you choose to support the standard. By following the verifiable credential standard, your organization can issue digital documents that can be verified anywhere.</p> <p>For a technical deep dive, refer to the Verifiable Credentials Data Model</p>","title":"Credentials"},{"location":"concepts/#passes","text":"<p>Passes are documents generated from one or more credentials that contain only the information required to be verified. They can be generated in advance or in real-time. Passes minimize the information about you that is shared with third parties.</p>","title":"Passes"},{"location":"concepts/#underlying-tech","text":"","title":"Underlying Tech"},{"location":"concepts/#linked-data","text":"<p>When we consider credentials getting exchanged online far and wide, a problem starts to occur - how does everyone know what every else means when they show a credential? To the rescue comes Linked Data, a format for representing structured data with self-contained descriptors of that data.</p> <p>\"Linked data is to spreadsheets and databases what the web of hypertext documents is to word processor files\" - W3C Wiki on Linked Data</p>","title":"Linked Data"},{"location":"concepts/#decentralized-identifiers","text":"<p>Taken from the Verifiable Credential Data Model, a decentralized identifier is \"a portable URL-based identifier, also known as a DID, associated with an entity. These identifiers are most often used in a verifiable credential and are associated with subjects such that a verifiable credential itself can be easily ported from one repository to another without the need to reissue the credential. An example of a DID is <code>did:example:123456abcdef</code>\"</p>","title":"Decentralized Identifiers"},{"location":"concepts/#zero-knowledge-proofs","text":"<p>One of the most exciting qualities of verifiable credentials are their ability to minimize the data shared about you when you prove who you are. The classic example is showing your driver's license in a bar. While a human bouncer may forget all the revealing information on your driver's license, a computerized bouncer that scans your driver's license never forgets any information. With zero knowledge proofs, you can choose specific information from your credentials to share with verifiers.</p> <p>These are enabled through a BBS+ Signature specification.</p> <p>Next: Choose your language</p> <ul> <li>CLI</li> <li>Node</li> <li>C#</li> <li>Python</li> <li>Browser</li> </ul>","title":"Zero Knowledge Proofs"},{"location":"concepts/#available-sdks","text":"<ul> <li> C#</li> <li> Xamarin (iOS, Android)</li> <li> .NET Core (MacOS, Windows, Linux)</li> <li> TypeScript/JS</li> <li> Node.js</li> <li> Browser</li> <li> Python</li> </ul>","title":"Available SDKs"},{"location":"concepts/#up-next","text":"<ul> <li> Objective C (iOS)</li> <li> Java/Kotlin (Android)</li> <li> React Native</li> <li> Rust</li> <li> Go</li> </ul>","title":"Up Next"},{"location":"reference/services/provider-service/","text":"<p>This service helps ecosystem providers with data management and onboarding. This service requires a security profile with administrative authorization access. This can be obtained during the deployment of your ecosystem infrastructure.</p>","title":"Provider Service"},{"location":"reference/services/provider-service/#onboarding","text":"","title":"Onboarding"},{"location":"reference/services/provider-service/#invite-participants","text":"<p>Users can be onboarded as participants in the ecosystem by sending an invitation and a security code. This code can be sent directly through them using existing platforms or via email, SMS, etc. When users accept this invitation, they should do so using the service methods as described in creating wallet with provider invitation</p> <p>In Trinsic Ecosystems, participants can be Individuals or Organizations. This distinction is important, as providers have the ability to apply restrictions on what functionalities can be invoked by these participants. Additonally, Organizations have the ability to write their DID Document to a public ledger. Currently, the supported ledger is Sovrin, with ION and Element still in development.</p> Trinsic CLI <pre><code>trinsic provider invite --organization --method-email admin@faber.edu\n\ntrinsic provider invite --person --method-email alice@faber.edu</code></pre>  TypeScript <pre><code>import { ProviderService, ParticipantType } from \"@trinsic/trinsic\";\n\nconst providerService = new ProviderService();\n\nlet inviteRequest = new InviteRequest();\ninviteRequest.setParticipant(ParticipantType.PARTICIPANT_TYPE_ORGANIZATION);\ninviteRequest.setEmail(\"admin@faber.edu\");\n\nconst inviteResponse = await providerService.inviteParticipant(inviteRequest);\n\nconsole.log(inviteResponse.getInvitationId());</code></pre>  C# <pre><code>using Trinsic;\n\nvar providerService = new ProviderService();\n\nvar inviteRequest = new InviteRequest\n{\n    ParticipantType = ParticipantType.Organization,\n    Email = \"admin@faber.edu\"\n}\n\nlet inviteResponse = await providerService.InviteParticipant(inviteRequest);\n\nConsole.WriteLine(inviteResponse.InvitationId);</code></pre>  Python <pre><code>from trinsic.services import ProviderService\n\nrequest = {\n    \"email\" : \"admin@faber.edu\",\n    \"participant\" : provider_services.Organization\n} \nresponse = await provider_service.invite_participant(request)</code></pre>   <p>The <code>invitationId</code> in the response contains the security code that users must supply when creating their wallet. If using email method in onboarding, they will receive this code in their email.</p>","title":"Invite Participants"},{"location":"reference/services/trust-registry/","text":"","title":"Trust Registry"},{"location":"reference/services/trust-registry/#overview","text":"","title":"Overview"},{"location":"reference/services/trust-registry/#specification","text":"","title":"Specification"},{"location":"reference/services/trust-registry/#api-reference","text":"","title":"API Reference"},{"location":"reference/services/trust-registry/#ecosystem-governance-framework","text":"","title":"Ecosystem Governance Framework"},{"location":"reference/services/trust-registry/#register-issuers-and-verifiers","text":"","title":"Register Issuers and Verifiers"},{"location":"reference/services/trust-registry/#check-authoritative-status","text":"","title":"Check Authoritative Status"},{"location":"reference/services/trust-registry/#offline-registry-file","text":"","title":"Offline Registry File"},{"location":"reference/services/wallet-service/","text":"<p>The wallet service is the main interface for interacting with a cloud wallet. The service endpoints are designed to closely match the recommendations of the Universal Wallet 2020  specficiation by W3C CCG. The service exposes a gRPC interface and a set of data contracts as described in the specification. Our intention with this design is to bring it closer to interoperability as more implementations of this wallet appear in production.</p>","title":"Wallet Service"},{"location":"reference/services/wallet-service/#create-wallet","text":"<p>Wallets can be created directly by the user or through an invitation by the ecosystem provider. Depending on the ecosystem settings, direct wallet creation may not be enabled for your provider.</p>","title":"Create Wallet"},{"location":"reference/services/wallet-service/#create-wallet-directly","text":"<p>To create a wallet directly without invitation, use the following methods. These methods return secure profile data that should be stored in a safe place. The profile is used to authenticate the wallet service with the cloud provider. Read more details and recommendations in the Security Profiles page.</p> Trinsic CLI <pre><code>trinsic wallet create --name &lt;profile_name&gt;</code></pre>  TypeScript <pre><code>const profile = await walletService.createWallet();</code></pre>  C# <pre><code>var profile = await walletService.Create();</code></pre>  Python <pre><code>profile = await wallet_service.create_wallet()</code></pre>","title":"Create wallet directly"},{"location":"reference/services/wallet-service/#create-wallet-with-provider-invitation","text":"<p>If invited by a provider, you can supply the security code found in your invitation (via email, SMS, etc). Read more about inviting participants to your ecosystem as provider.</p> Trinsic CLI <pre><code>trinsic wallet create --name &lt;profile&gt; --security-code &lt;code&gt;</code></pre>  TypeScript <pre><code>const profile = await walletService.createWallet(\"&lt;security code&gt;\");</code></pre>  C# <pre><code>var profile = await walletService.Create(\"&lt;security code&gt;\");</code></pre>  Python <pre><code>profile = await wallet_service.create_wallet(\"&lt;security code&gt;\")</code></pre>","title":"Create wallet with provider invitation"},{"location":"reference/services/wallet-service/#insert-record","text":"<p>This method allows inserting any JSON data in the wallet.</p> Trinsic CLI <pre><code>trinsic wallet insert-item --item &lt;INPUT_JSON_FILE&gt;</code></pre>  TypeScript <pre><code>let itemId = await walletService.insertItem({\n    \"foo\": \"bar\"\n});</code></pre>  C# <pre><code>var item = new JObject\n{\n    { \"foo\", \"bar\" }\n};\n\nvar itemId = await walletService.InsertItem(item);</code></pre>  Python <pre><code>item_id = await wallet_service.insert_item(credential)</code></pre>   <p>The output of this method will be a unique <code>itemId</code> that can be used as input where required.</p>","title":"Insert Record"},{"location":"reference/services/wallet-service/#search-query","text":"<p>Querying wallet data in our SDK is enabled through the use of familiar SQL syntax. All data is stored in JSON-LD format, so it can be easily searched. This apporach allows us to give developers full control over how data is retrieved. In addition to customizable sorting, paging and filtering, developers have the ability to construct projections, combine result sets, and even run user-defined functions over their queries.</p>  <p>This endpoint will support querying using Verifiable Presentation Request Spec . This feature is still in development.</p>","title":"Search / Query"},{"location":"reference/services/wallet-service/#basic-search","text":"<p>The default query used in the commands below returns a full wallet result set. The query is <code>SELECT * FROM c</code>.</p> Trinsic CLI <pre><code>trinsic wallet search</code></pre>  TypeScript <pre><code>const items = await walletService.Search();</code></pre>  C# <pre><code>var items = await walletService.Search();</code></pre>  Python <pre><code>item = await wallet_service.search()</code></pre>","title":"Basic Search"},{"location":"reference/services/wallet-service/#sql-search","text":"<p>To pass custom query to the search function, use the query parameter or the available overload.</p> Trinsic CLI <pre><code>trinsic wallet search \\\n    --query \"SELECT * FROM c WHERE c.type = 'VerifiableCredential'\"</code></pre>  TypeScript <pre><code>const query = \"SELECT * FROM c WHERE c.type = 'VerifiableCredential'\";\n\nconst items = await walletService.search(query);</code></pre>  C# <pre><code>var items = await walletService.Search(\"SELECT * FROM c WHERE c.type = 'VerifiableCredential'\");</code></pre>  Python <pre><code>query = \"SELECT * FROM c WHERE c.type = 'VerifiableCredential'\"\nitem = await wallet_service.search(query)</code></pre>","title":"SQL Search"},{"location":"reference/services/wallet-service/#common-sql-queries","text":"","title":"Common SQL Queries"},{"location":"reference/services/wallet-service/#paging","text":"<p>Paging uses the <code>OFFSET</code> clause that takes in a value indicating how many records should be skipped in the returned query. To specify the size of the result set (page size) use the <code>LIMIT</code> clause.</p> <pre><code>SELECT * FROM c OFFSET 10 LIMIT 5</code></pre>","title":"Paging"},{"location":"reference/services/wallet-service/#sorting","text":"<p>The optional <code>ORDER BY</code> clause specifies the sorting order for results returned by the query. To control sorting order, specify <code>ASC</code> or <code>DESC</code> at the end; if not specified ascending order is used by default.</p> <pre><code>SELECT * FROM c ORDER BY c.credential.issued DESC</code></pre>","title":"Sorting"},{"location":"reference/services/wallet-service/#filtering","text":"<p>The optional WHERE clause (<code>WHERE &lt;filter_condition&gt;</code>) specifies condition(s) that the source JSON items must satisfy for the query to include them in results. A JSON item must evaluate the specified conditions to true to be considered for the result. The index layer uses the <code>WHERE</code> clause to determine the smallest subset of source items that can be part of the result.</p> <pre><code>SELECT * FROM c WHERE c.name = 'Trinsic' AND c.dateCreated &gt;= \"2020-09-30T23:14:25.7251173Z\"</code></pre>","title":"Filtering"},{"location":"reference/services/wallet-service/#grouping","text":"<p>The <code>GROUP BY</code> clause divides the query's results according to the values of one or more specified properties. Examples and detailed description on working with grouped results can be found here </p>","title":"Grouping"},{"location":"reference/services/wallet-service/#additional-resources","text":"<p>You can read the full documentation on working with SQL queries on the Azure Cosmos DB website .</p>","title":"Additional Resources"},{"location":"reference/services/wallet-service/#issue-credential","text":"<p>The wallet service supports signing data using BBS+ Signatures . The data is signed with a key unique to the owner's wallet. This key is also used as linked secret, when it comes to proof derivation.</p>  <p>This endpoint requires that the user provide a valid JSON-LD document.</p>  Trinsic CLI <pre><code>trinsic issuer issue --document &lt;INPUT_JSONLD_FILE&gt; --out &lt;OUTPUT_FILE&gt;</code></pre>  TypeScript <pre><code>let unsignedDocument = {\n    \"@context\": \"https://w3id.org/security/v2\",\n    \"id\": \"https://issuer.oidp.uscis.gov/credentials/83627465\"\n}\n\nlet signedDocument = await walletService.issue(unsignedDocument);</code></pre>  C# <pre><code>var unsignedDocument = new JObject\n{\n    { \"@context\", \"https://w3id.org/security/v2\" },\n    { \"id\", \"https://issuer.oidp.uscis.gov/credentials/83627465\" }\n};\n\nvar signedDocument = await walletService.IssueCredential(unsignedDocument);</code></pre>  Python <pre><code>import json\ncredential_json = json.dumps({\n  { \"@context\", \"https://w3id.org/security/v2\" },\n  { \"id\", \"https://issuer.oidp.uscis.gov/credentials/83627465\" }\n})\ncredential = await wallet_service.issue_credential(credential_json)</code></pre>   <p>The output of this method will be a signed JSON document using BBS+ Signature Suite 2020. This document is not automatically stored in the wallet when issued. You need to call the insert record separately if you'd like to store a copy of this document.</p>","title":"Issue Credential"},{"location":"reference/services/wallet-service/#create-proof","text":"<p>Wallets allow data to be shared between parties in a secure manner, using a technique called Zero Knowledge Proofs. Trinsic Ecosystems uses the BBS+ Signature Proof scheme to allow data to be selectively disclosed to the requesting party. This allows users to share only the requested subset of data, instead the entire document.</p> <p>The endpoint to create a proof requires two inputs:</p> <ul> <li>document in the wallet that is signed with the correct signature</li> <li>JSONLD frame that describes the data to be disclosed</li> </ul> Trinsic CLI <pre><code>trinsic issuer create-proof --document-id &lt;STRING&gt; --out &lt;OUTPUT_FILE&gt; --reveal-document &lt;JSONLD_FRAME_FILE&gt;</code></pre>  TypeScript <pre><code>let frame = {\n    \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n    \"type\": [ \"VerifiableCredential\" ],\n    \"@explicit\": true,\n    \"issuer\": {}\n}\nlet itemId = \"&lt;item document id&gt;\";\n\nlet signedDocument = await walletService.createProof(itemId, frame);</code></pre>  C# <pre><code>var frame = new JObject\n{\n    { \"@context\", \"https://www.w3.org/2018/credentials/v1\" },\n    { \"@explicit\", true }\n    { \"issuer\", new JObject() }\n};\nvar itemId = \"&lt;item document id&gt;\";\n\nvar signedDocument = await walletService.CreateProof(itemId, frame);</code></pre>  Python <pre><code>import json\nframe_json = json.dumps({\n\"@context\": \"https://www.w3.org/2018/credentials/v1\",\n\"type\": [ \"VerifiableCredential\" ],\n\"@explicit\": true,\n\"issuer\": {}\n})\n\npresentation = wallet_services.create_proof(document_id, frame_json)</code></pre>","title":"Create Proof"},{"location":"reference/services/wallet-service/#verify-proof","text":"<p>This endpoint verifies if the submitted data contains a valid proof. The data to be verified must contain a Linked Data Proof with BBS+ signature scheme.</p> Trinsic CLI <pre><code>trinsic issuer verify-proof --proof-document &lt;JSONLD_FILE&gt;</code></pre>  TypeScript <pre><code>let isValid = await walletService.verifyProof(proofDocument);\n\nconsole.log(\"Verify result: \" + isValid);</code></pre>  C# <pre><code>var isValid = await walletService.VerifyProof(proofDocument);\n\nConsole.WriteLine($\"Verify result: {isValid}\");</code></pre>  Python <pre><code>valid = await wallet_service.verify_proof(presentation)</code></pre>","title":"Verify Proof"},{"location":"reference/services/wallet-service/#data-exchange","text":"<p>Exchanging data securely is one of the fundamental functions of digital identity systems. There are many specifications with varying maturity that aim to provide interoperable and secure way of exchanging authentic data. We are commited to providing support for these methods.</p> <ul> <li>DIDComm Messaging </li> <li>Wallet And Credential Interactions </li> <li>OpenID Connect Credential Provider </li> </ul>  <p>During this beta period, we are only supporting exchanging data between users by using their email addresses. The messages are routed securely to the destination wallet without leaving the secure network of the ecosystem backend. Our goal is to provide basic ability to share data without affecting the user experience. As interoperable exchange methods become available, we will add this functionality in the SDK.</p>","title":"Data Exchange"},{"location":"reference/services/wallet-service/#sending-documents-using-email-as-identifier","text":"<p>To send a document to another user, they must have created a wallet and associated their email address with that wallet.</p> Trinsic CLI <pre><code>trinsic wallet send --email &lt;EMAIL_ADDRESS&gt; --item &lt;FILE&gt;</code></pre>  TypeScript <pre><code>await walletService.send(document, \"admin@example.com\");</code></pre>  C# <pre><code>await walletService.Send(document, \"admin@example.com\");</code></pre>  Python <pre><code>await wallet_service.send(document, \"admin@example.com\");</code></pre>","title":"Sending documents using Email as identifier"},{"location":"reference/setup/","text":"","title":"Setup"},{"location":"reference/setup/#installation","text":"<p>If you are ready to begin integrating the SDK into an existing project, make sure you have an SDK installed. We currently provide a CLI, TypeScript, and C# SDKs for local development.</p> <p>If you're here to just go through the walkthrough, check out our Gitpod cloud environment for easy installation (You'll have to create a free account with gitpod).</p> Trinsic CLI TypeScript C#","title":"Installation"},{"location":"reference/setup/#authorization","text":"<p>Trinsic Ecosystems uses authenticated access for accessing personal data. This is implemented using Authorization Capabilities for Linked Data  (ZCAP-LD for short). Zcaps provide a secure way for linked data systems to grant and express authority utilizing the object capability model. Our wallet capabilities are represented as linked data objects which are signed with Linked Data Proofs. LD Proofs represent the core technology of the way we share and exchange authentic data with others.</p>","title":"Authorization"},{"location":"reference/setup/#profile-data-format","text":"<p>Security Profiles are represented as a protobuf message that contains details about the connecting device to the remote cloud wallet. These are sensitive details that contain private key data, and must always be stored in a secure storage. The details of this data contract are expressed with this proto message.</p> <pre><code>message WalletProfile {\n    google.protobuf.Struct did_document = 1;\n    string wallet_id = 2;\n    string invoker = 3;\n    string capability = 4;\n    bytes invoker_jwk = 5;\n}</code></pre>  <code>did_document</code> contains the DID Document generated by the device that will be used to access the remote wallet. Each device/profile will have a unique DID Document. The DID method used in this document is <code>did:key</code>. <code>wallet_id</code> represents the remote wallet identifier that this profile has been granted access. <code>invoker</code> represents the specific key in the DID Document that was granted capability authorization. <code>capability</code> represents the unique identifier of the z-cap that the <code>invoker</code> is allowed to access. <code>invoker_jwk</code> represents the key of the invoker in JWK format. This key is already present in the DID Document, we simply store it here in JWK format for convenience.   <p>This profile is always stored in its binary form using the protobuf native serialization. A profile is created by using the Create Wallet functionality in the SDK.</p>","title":"Profile Data Format"},{"location":"reference/setup/#configuration","text":"<p>Trinsic SDK contains minimal configuration. This configuration is stored differently, depending on what package is used.</p>","title":"Configuration"},{"location":"reference/setup/#configuration-with-cli","text":"<p>The CLI stores it's configuration in the user's home directory, typically in <code>~/.trinsic/</code>. This directory contains the main configuration file <code>config.toml</code> and all the profile data.</p>","title":"Configuration with CLI"},{"location":"reference/setup/#show-configuration","text":"<p>To print the current configuration file in the terminal use:</p> <pre><code>trinsic config --show</code></pre> <p>Typical configuration file may look like this:</p> <pre><code>[server]\naddress = \"http://localhost:5000/\"\n\n[profile]\ndefault = \"my_profile\"</code></pre>","title":"Show Configuration"},{"location":"reference/setup/#update-configuration-entry","text":"<p>To change the configuration values, use the <code>config</code> subcommand with the attribute and it's value.</p> <pre><code>trinsic config &lt;attribute_name&gt; &lt;attribute_value&gt;</code></pre> <p>The following attributes are currently supported:</p>  <code>server-address</code>  <p>Updates the default server address the CLI communicates</p> <pre><code>trinsic config --server-address https://example.com/</code></pre>  <code>profile-default</code>  <p>Updates the default profile used with the CLI</p> <pre><code>trinsic config --profile-default alice</code></pre>","title":"Update Configuration Entry"},{"location":"reference/setup/#configuration-with-sdk","text":"<p>When using the SDK in your code, you can pass parameters to the default service constructors and use the provided methods to set different active profiles.</p> TypeScript <pre><code>import { WalletService } from '@trinsic/trinsic';\n\n// Set the server address\nconst service = new WalletService(\"https://example.com\");\n\n// Create new profile or import an existing one\nconst myProfile = await service.createWallet();\n\n// Set the profile to be used with authorization pipeline\nservice.setProfile(myProfile);</code></pre>  C# <pre><code>using Trinsic;\n\n// Set the server address\nvar service = new WalletService(\"https://example.com\");\n\n// Create new profile or import an existing one\nvar myProfile = await service.CreateWallet();\n\n// Set the profile to be used with authorization pipeline\nservice.SetProfile(myProfile);</code></pre>","title":"Configuration with SDK"},{"location":"reference/setup/configuration/","text":"","title":"Configuration"},{"location":"reference/setup/configuration/#configuration","text":"<p>Trinsic SDK contains minimal configuration. This configuration is stored differently, depending on what package is used.</p>","title":"Configuration"},{"location":"reference/setup/configuration/#configuration-with-cli","text":"<p>The CLI stores it's configuration in the user's home directory, typically in <code>~/.trinsic/</code>. This directory contains the main configuration file <code>config.toml</code> and all the profile data.</p>","title":"Configuration with CLI"},{"location":"reference/setup/configuration/#show-configuration","text":"<p>To print the current configuration file in the terminal use:</p> <pre><code>trinsic config --show</code></pre> <p>Typical configuration file may look like this:</p> <pre><code>[server]\naddress = \"http://localhost:5000/\"\n\n[profile]\ndefault = \"my_profile\"</code></pre>","title":"Show Configuration"},{"location":"reference/setup/configuration/#update-configuration-entry","text":"<p>To change the configuration values, use the <code>config</code> subcommand with the attribute and it's value.</p> <pre><code>trinsic config &lt;attribute_name&gt; &lt;attribute_value&gt;</code></pre> <p>The following attributes are currently supported:</p>  <code>server-address</code>  <p>Updates the default server address the CLI communicates</p> <pre><code>trinsic config --server-address https://example.com/</code></pre>  <code>profile-default</code>  <p>Updates the default profile used with the CLI</p> <pre><code>trinsic config --profile-default alice</code></pre>","title":"Update Configuration Entry"},{"location":"reference/setup/configuration/#configuration-with-sdk","text":"<p>When using the SDK in your code, you can pass parameters to the default service constructors and use the provided methods to set different active profiles.</p> TypeScript <pre><code>import { WalletService } from '@trinsic/trinsic';\n\n// Set the server address\nconst service = new WalletService(\"https://example.com\");\n\n// Create new profile or import an existing one\nconst myProfile = await service.createWallet();\n\n// Set the profile to be used with authorization pipeline\nservice.setProfile(myProfile);</code></pre>  C# <pre><code>using Trinsic;\n\n// Set the server address\nvar service = new WalletService(\"https://example.com\");\n\n// Create new profile or import an existing one\nvar myProfile = await service.CreateWallet();\n\n// Set the profile to be used with authorization pipeline\nservice.SetProfile(myProfile);</code></pre>","title":"Configuration with SDK"},{"location":"reference/setup/profiles/","text":"<p>Trinsic Ecosystems uses authenticated access for accessing personal data. This is implemented using Authorization Capabilities for Linked Data  (ZCAP-LD for short). Zcaps provide a secure way for linked data systems to grant and express authority utilizing the object capability model. Our wallet capabilities are represented as linked data objects which are signed with Linked Data Proofs. LD Proofs represent the core technology of the way we share and exchange authentic data with others.</p>","title":"Security Profiles / Authorization"},{"location":"reference/setup/profiles/#profile-data-format","text":"<p>Security Profiles are represented as a protobuf message that contains details about the connecting device to the remote cloud wallet. These are sensitive details that contain private key data, and must always be stored in a secure storage. The details of this data contract are expressed with this proto message.</p> <pre><code>message WalletProfile {\n    google.protobuf.Struct did_document = 1;\n    string wallet_id = 2;\n    string invoker = 3;\n    string capability = 4;\n    bytes invoker_jwk = 5;\n}</code></pre>  <code>did_document</code> contains the DID Document generated by the device that will be used to access the remote wallet. Each device/profile will have a unique DID Document. The DID method used in this document is <code>did:key</code>. <code>wallet_id</code> represents the remote wallet identifier that this profile has been granted access. <code>invoker</code> represents the specific key in the DID Document that was granted capability authorization. <code>capability</code> represents the unique identifier of the z-cap that the <code>invoker</code> is allowed to access. <code>invoker_jwk</code> represents the key of the invoker in JWK format. This key is already present in the DID Document, we simply store it here in JWK format for convenience.   <p>This profile is always stored in its binary form using the protobuf native serialization. A profile is created by using the Create Wallet functionality in the SDK.</p>","title":"Profile Data Format"},{"location":"reference/setup/installation/install-cli/","text":"<p>The CLI can be installed directly using the Cargo tool. This requires the Rustup toolchain  installed on your system.</p> <p>Once installed, run this command in terminal:</p> <pre><code>cargo install --git https://github.com/trinsic-id/sdk.git --branch main</code></pre> <p>To verify that the CLI has been installed successfully, try running:</p> <pre><code>trinsic --help</code></pre>","title":"Install cli"},{"location":"reference/setup/installation/install-net/","text":"<p>Install the packages directly from Nuget.org </p> Package Manager <pre><code>PM&gt; Install-Package Trinsic</code></pre>  .NET CLI <pre><code>&gt; dotnet add package Trinsic</code></pre>  PackageReference <pre><code>&lt;PackageReference Include=\"Trinsic\" /&gt;</code></pre>","title":"Install net"},{"location":"reference/setup/installation/install-node/","text":"<p>Install the package for Node or Browser from npmjs.com </p> Install <pre><code>npm i @trinsic/trinsic</code></pre>","title":"Install node"},{"location":"walkthrough/vaccination-browser/","text":"<p>In this walkthrough we will showcase a practical example of how participants in an ecosystem use verifiable data to exchange trusted bits of information.</p>","title":"Vaccination Use Case for Browsers"},{"location":"walkthrough/vaccination-browser/#ecosystem-setup","text":"<p>Before we begin, please ensure that you have access to our beta environment. If you haven't yet, join our early adopter program and we'll get in touch.</p>","title":"Ecosystem setup"},{"location":"walkthrough/vaccination-browser/#technical-requirements","text":"<p>You can run this example on your local machine, or you can use our Gitpod setup to bootstrap a full development environment. If running locally, you only need node and npm installed on your machine and a code editor of your choice.</p>","title":"Technical requirements"},{"location":"walkthrough/vaccination-browser/#create-new-project","text":"<p>Let's create a new console app that we will use to add our sample code</p> <pre><code>mkdir VaccinationSample &amp;&amp; cd VaccinationSample &amp;&amp; npm init</code></pre> <p>You can select all the defaults for the node project.</p> <p>Add the required dependencies</p> <pre><code>npm i @trinsic/trinsic-web</code></pre> <pre><code>npm i --save-dev http-server webpack webpack-cli</code></pre>","title":"Create new project"},{"location":"walkthrough/vaccination-browser/#configure-webpack","text":"<p>After installing the dependencies you'll need a configuration file for webpack. Create a file called webpack.config.js at the root of your project and then copy and paste this into that file <pre><code>const path = require('path');\n\nmodule.exports = {\n  mode: 'development',\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, './src'),\n    filename: 'bundle.js',\n  }\n};</code></pre></p>","title":"Configure Webpack"},{"location":"walkthrough/vaccination-browser/#set-up-website","text":"<p>Create a simple html page with a script tag referencing the webpack bundle that will be built after completing the sample code. Note that you will not have the bundle.js file yet because it will be generated from the index.js file you create.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Vaccination Sample&lt;/title&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" /&gt;\n  &lt;meta name=\"description\" content=\"\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Vaccination Sample&lt;/h1&gt;\n  &lt;div id=\"wallet\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\"../bundle.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;</code></pre> <p>Your file structure should look like this</p> <pre><code>VaccinationSample\n    src\n        index.html\n        index.js\n    package.json\n    webpack.config.js</code></pre>","title":"Set up Website"},{"location":"walkthrough/vaccination-browser/#configure-services","text":"<p>Create a reference to the wallet service that points to your ecosystem service. You should have received this URL with your ecosystem setup. In your <code>index.js</code> file add the following line replacing the placeholder with your URL:</p> <pre><code>const { WalletService } = require('@trinsic/trinsic-web')\n\nconst walletService = new WalletService(\"&lt;ECOSYSTEM SERVICE URL&gt;\");</code></pre>","title":"Configure services"},{"location":"walkthrough/vaccination-browser/#setup-wallet-profiles","text":"<p>Let's create three different profiles, each pointing to a separate wallet. Since we are using a single console app for this demo, we will simply set the active profile before each interaction to designate which actor is currently taking action. To create a new wallet profile, we use the Create Wallet feature.</p> <pre><code>let allison = await walletService.createWallet();\nlet clinic = await walletService.createWallet();\nlet airline = await walletService.createWallet();</code></pre> <p>If you would like to save the profile for future use, you can simply export the serialized profile to a local storage. Please note that the profiles contain sensitive key data, so they should be stored in a secure enclave.</p> <pre><code>const fs = require('fs');\nconst { Struct } = require('google-protobuf/google/protobuf/struct_pb');\n\n// Serialize profile by exporting the binary protobuf form\nlocalStorage.setItem(\"allison.bin\", allison.serializeBinary());\n\n// Create profile from existing data\nlet allison = WalletProfile.deserializeBinary(localStorage.getItem(\"allison.bin\"));</code></pre>  <p>Loading Profiles</p> <p>In order to load a profile from a saved file you'll need to install google-protobuf with <code>npm i google-protobuf</code> in order to use the Struct class and convert the DID Document from JavaScript to the protobuf form.</p>  <p>Read more about security profiles and authentication.</p>","title":"Setup wallet profiles"},{"location":"walkthrough/vaccination-browser/#certificate-issuance","text":"<p>Upon receiving her vaccine, Allison also receives a digital certificate from the clinic. This ceritificate is digitially signed by the clinic, acting as an issuer. The certificate is in a JSON form, and for this example, we load the JSON structure directly.</p> <pre><code>// Set active profile to 'clinic' so we can issue credential signed\n// with the clinic's signing keys\nwalletService.setProfile(clinic);\n\n// Read the JSON credential data\nlet credentialJson = {\n  \"@context\": [\n      \"https://www.w3.org/2018/credentials/v1\",\n      \"https://w3id.org/vaccination/v1\",\n      \"https://w3id.org/security/bbs/v1\"\n  ],\n  \"id\": \"urn:uvci:af5vshde843jf831j128fj\",\n  \"type\": [\n      \"VaccinationCertificate\",\n      \"VerifiableCredential\"\n  ],\n  \"description\": \"COVID-19 Vaccination Certificate\",\n  \"name\": \"COVID-19 Vaccination Certificate\",\n  \"expirationDate\": \"2029-12-03T12:19:52Z\",\n  \"issuanceDate\": \"2019-12-03T12:19:52Z\",\n  \"issuer\": \"did:key:zUC724vuGvHpnCGFG1qqpXb81SiBLu3KLSqVzenwEZNPoY35i2Bscb8DLaVwHvRFs6F2NkNNXRcPWvqnPDUd9ukdjLkjZd3u9zzL4wDZDUpkPAatLDGLEYVo8kkAzuAKJQMr7N2\",\n  \"credentialSubject\": {\n      \"id\": \"urn:uuid:c53e70f8-ce9a-4576-8744-e5f85c20a743\",\n      \"type\": \"VaccinationEvent\",\n      \"batchNumber\": \"1183738569\",\n      \"countryOfVaccination\": \"US\"\n  }\n};\n\n// Sign the credential using BBS+ signature scheme\nlet credential = await walletService.issueCredential(JSON.parse(credentialJson));</code></pre> <p>At this point, the clinic can send the signed credential to Allison using any available methods. These methods can include any message exchange protocol, or a custom transport. In this case, we'll assume that the credential was delivered to Allison in an offline environment.</p>","title":"Certificate issuance"},{"location":"walkthrough/vaccination-browser/#store-certificate-in-personal-wallet","text":"<p>Allison can store this credential in her cloud wallet, simply by calling the Insert Item function.</p> <pre><code>// Set active profile to 'allison' so we can manage her cloud wallet\nwalletService.setProfile(allison);\n\n// Insert the signed credential\nlet itemId = await walletService.insertItem(credential);</code></pre>","title":"Store certificate in personal wallet"},{"location":"walkthrough/vaccination-browser/#proof-of-vaccination","text":"<p>Before boarding an airplane, Allison must show a proof of vaccination. The request for this proof also comes in a form of JSON, in this case a JSON-LD frame. This request can be communicated using any exchange protocol. Again, we'll assume this was done offline.</p> <p>This request asks Allison to provide proof of valid vaccination certificate, including the <code>issuer</code>, <code>batchNumber</code>and <code>countryOfVaccination</code> fields.</p> <p>Allison can use the Create Proof functions to build a proof that will share only the requested fields.</p> <pre><code>// We'll read the request frame from a file and communicate this with Allison\nlet proofRequestJson = {\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/vaccination/v1\",\n        \"https://w3id.org/security/bbs/v1\"\n    ],\n    \"type\": [\n        \"VerifiableCredential\",\n        \"VaccinationCertificate\"\n    ],\n    \"@explicit\": true,\n    \"issuer\": {},\n    \"credentialSubject\": {\n        \"@explicit\": true,\n        \"@type\": \"VaccinationEvent\",\n        \"batchNumber\": {},\n        \"countryOfVaccination\": {}\n    }\n}\n\n// Set the active profile to 'allison'\nwalletService.setProfile(allison);\n\n// Build a proof for the given request and the `itemId` we previously received\n// which points to the stored credential\nlet credentialProof = await walletService.createProof(itemId, JSON.parse(proofRequestJson));</code></pre>","title":"Proof of vaccination"},{"location":"walkthrough/vaccination-browser/#verification","text":"<p>Allison shares the proof of credential she created with the airline. The airline can now use Verify Proof functions to check the validity of the proof.</p> <pre><code>// Set active profile to 'airline'\nwalletService.setProfile(airline);\n\n// Check for valid signature\nlet valid = await walletService.verifyProof(credentialProof);\n\ndocument.getElementById(\"wallet\").innerHTML = valid</code></pre>","title":"Verification"},{"location":"walkthrough/vaccination-browser/#build","text":"<p>To build the bundle.js file run <pre><code>webpack build</code></pre></p>","title":"Build"},{"location":"walkthrough/vaccination-browser/#run","text":"<p>To serve the website and run the sample run <pre><code>npx http-server src</code></pre></p>","title":"Run"},{"location":"walkthrough/vaccination-browser/#complete-sample-code","text":"<p>This sample is available in our GitHub repo.</p>","title":"Complete sample code"},{"location":"walkthrough/vaccination-cli/","text":"<p>It can be challenging to understand how verifiable credentials work until you see some examples. This walkthrough will show how a vaccination card might be issued, held, and proven using verifiable credentials with the Trinsic CLI. It assumes no prior knowledge to decentralized identity.</p> <p>In this walkthrough we will showcase a practical example of how participants in an ecosystem use verifiable data to exchange trusted bits of information.</p>","title":"Vaccination Use Case for CLI"},{"location":"walkthrough/vaccination-cli/#ecosystem-setup","text":"<p>Before we begin, please ensure that you have access to our beta environment. If you haven't yet, join our early adopter program and we'll get in touch.</p>","title":"Ecosystem setup"},{"location":"walkthrough/vaccination-cli/#use-case-overview","text":"<p>In this walkthrough we'll explore a scenario where Allison gets her vaccination certificate. She then uses this certificate to board an airline that requires proof of vaccination. Each participant in this scenario is part of the same ecosystem, though this is not a functional requirement.</p> <pre><code>journey\n    section Issuance\n      Obtain cert.: 3: Allison, Clinic\n      Store in wallet: 3: Allison\n    section Verification\n      Request cert.: 3: Allison, Airline\n      Share: 3: Allison\n      Verify: 5: Airline</code></pre> <p>If you haven't learned about verifiable credentials already, first read Verifiable Credential Basics.</p> <p>In most credential exchange scenarios there are three primary roles - Issuer, Holder, and Verifier.</p> <p>Issuer: Responsible for issuing signed credentials that attest information about a credential subject</p> <p>Holder: Stores issued credentials from an issuer. Most often this is the credential subject. Also generates passes to share with verifiers.</p> <p>Verifier: Verifies passes presented from holders.</p>","title":"Use case overview"},{"location":"walkthrough/vaccination-cli/#install-trinsic-cli","text":"<p>If you're here to just go through the walkthrough, check out our Gitpod cloud environment for easy installation (You'll have to create a free account with gitpod).</p> <p>To install the CLI locally, clone our sdk github repo and compile the SDK <pre><code>git clone https://github.com/trinsic-id/sdk.git\n\ncd sdk/cli\n\ncargo install --path .</code></pre></p> <p>Once installed, configure the CLI's server address to your Ecosystem:</p> Trinsic CLI <pre><code>trinsic config --server-address https://example.com</code></pre>    <p>Note</p>  <p>Reference: Configuration with CLI</p>","title":"Install Trinsic CLI"},{"location":"walkthrough/vaccination-cli/#meet-allison","text":"<p>Allison's town just received the go ahead to vaccinate everyone. We'll walk through a scenario where Allison gets her vaccination card and then generates a pass with it to board an airline, all using her devices.</p> <p>To start, create a directory call walkthrough, and then three directories in that called <code>allison</code>, <code>clinic</code>, and <code>airline</code>.  <pre><code>walkthrough\n|- allison\n|- clinic\n|- airline</code></pre></p>","title":"Meet Allison"},{"location":"walkthrough/vaccination-cli/#create-wallets","text":"<p>We'll start by creating a wallet for each participant in this credential exchange. Wallets can be created by anyone, for anyone. In this scenario, we have three wallets. Allison will be the credential holder, the Airline will be the verifier, and the vaccination clinic will be the issuer.</p> <p>These wallets have been created by you, your role is an ecosystem provider. Your role is to help deploy a credential exchange ecosystem.</p> Trinsic CLI <pre><code>trinsic wallet create --description \"Allison's Wallet\" --name allison &amp;&amp; \\\ntrinsic wallet create --description \"Airline's wallet\" --name airline &amp;&amp; \\\ntrinsic wallet create --description \"Vaccination Clinic\" --name clinic</code></pre>    <p>Note</p>  <p>Reference: Create Wallet</p>","title":"Create Wallets"},{"location":"walkthrough/vaccination-cli/#issue-a-credential","text":"<p>Each credential is a JSON-LD document that is signed with a special digital signature to makes each piece of data in the credential separately verifiable. This is a called bbs+ signature scheme. The credential is signed, but not sent. For now, sending the credential should be done through existing communication methods. Because this sample is on the same file system, our communication method is simply moving it to allison's directory :)</p> Trinsic CLI <pre><code>    trinsic --profile clinic issuer issue --document vaccination-certificate-unsigned.jsonld --out ./clinic/vaccination-certificate-signed.jsonld\n\n    mv ./vaccination-certificate-signed.jsonld allison</code></pre>    <p>Info</p>  <p>Reference: Issue a Credential</p>","title":"Issue a Credential"},{"location":"walkthrough/vaccination-cli/#store-credential-in-wallet","text":"<p>Once Allison receives the credential, she can store it within her wallet. She can use any device that she's authorized to use with her wallet.</p> Trinsic CLI <pre><code>    trinsic --profile allison wallet insert-item --item ./allison/vaccination-certificate-signed.jsonld</code></pre>   <p>Note down the response <code>item_id</code> printed to the console for the next step.</p>  <p>Info</p>  <p>Reference: Insert Record</p>","title":"Store Credential in Wallet"},{"location":"walkthrough/vaccination-cli/#create-proof","text":"<p>Now let's create a proof for Allison. She may choose to generate this proof before going to the airport, or might generate it right as she boards.</p> <p>Replace the <code>&lt;item_id&gt;</code> in the generate proof command below with the output from the <code>insert_item</code> above.</p> Trinsic CLI <pre><code>    trinsic --profile allison issuer create-proof --document-id \"&lt;item-id&gt;\" --out ./vaccination-certificate-partial-proof.jsonld --reveal-document ./vaccination-certificate-frame.jsonld\n\n    more vaccination-certificate-partial-proof.jsonld\n\n    mv vaccination-certificate-partial-proof.json ../airline</code></pre>   <p>Take a look at the proof. Notice how only the attributes included in the <code>frame</code> are included with the proof.</p> <p>Allison sends this proof to the airline for them to verify.</p>  <p>Info</p>  <p>Reference: Create Proof</p>","title":"Create Proof"},{"location":"walkthrough/vaccination-cli/#verify-proof","text":"<p>Once the airline receives the proof, they can now verify it to ensure its authenticity. Because Allison sent a proof of her vaccination credential and not the credential itself, the airline only receives its required information.</p> Trinsic CLI <pre><code>    trinsic --profile airline issuer verify-proof --proof-document ./airline/vaccination-certificate-partial-proof.jsonld</code></pre>   <p>Watch for the output of <code>true</code> to know that the credential successfully passed all of the verification processes.</p>  <p>Info</p>  <p>Reference: Verify Proof</p>","title":"Verify Proof"},{"location":"walkthrough/vaccination-net/","text":"<p>In this walkthrough we will showcase a practical example of how participants in an ecosystem use verifiable data to exchange trusted bits of information.</p>","title":"Vaccination Use Case for .NET Core"},{"location":"walkthrough/vaccination-net/#ecosystem-setup","text":"<p>Before we begin, please ensure that you have access to our beta environment. If you haven't yet, join our early adopter program and we'll get in touch.</p>","title":"Ecosystem setup"},{"location":"walkthrough/vaccination-net/#use-case-overview","text":"<p>In this walkthrough we'll explore a scenario where Allison gets her vaccination certificate. She then uses this certificate to board an airline that requires proof of vaccination. Each participant in this scenario is part of the same ecosystem, though this is not a functional requirement.</p> <pre><code>journey\n    section Issuance\n      Obtain cert.: 3: Allison, Clinic\n      Store in wallet: 3: Allison\n    section Verification\n      Request cert.: 3: Allison, Airline\n      Share: 3: Allison\n      Verify: 5: Airline</code></pre> <p>If you haven't learned about verifiable credentials already, first read Verifiable Credential Basics.</p> <p>In most credential exchange scenarios there are three primary roles - Issuer, Holder, and Verifier.</p> <p>Issuer: Responsible for issuing signed credentials that attest information about a credential subject</p> <p>Holder: Stores issued credentials from an issuer. Most often this is the credential subject. Also generates passes to share with verifiers.</p> <p>Verifier: Verifies passes presented from holders.</p>","title":"Use case overview"},{"location":"walkthrough/vaccination-net/#technical-requirements","text":"<p>You can run this example on your local machine, or you can use our Gitpod setup to bootstrap a full development environment. If running locally, you only need .NET Core installed. We will use the dotnet CLI and the editor of your choice.</p>  <p>Supported runtimes</p> <p>Xamarin targets for iOS and Android are fully supported using the same package dependencies. Support for Blazor in Web Assembly will be available in a future release.</p>","title":"Technical requirements"},{"location":"walkthrough/vaccination-net/#create-new-project","text":"<p>Let's create a new .NET console app that we will use to add our sample code</p> <pre><code>dotnet new console -n VaccinationSample &amp;&amp; cd VaccinationSample</code></pre> <p>Add the required dependencies</p> <pre><code>dotnet add package Trinsic --prerelease\ndotnet add package Okapi.Net --prerelease</code></pre>  <p>The package <code>Okapi.Net</code> is already a dependency of <code>Trinsic</code> package, but we must add explicitly to bring in static library dependencies. This will not be required in future version and only package <code>Trinsic</code> can be used.</p>","title":"Create new project"},{"location":"walkthrough/vaccination-net/#configure-services","text":"<p>Create a reference to the wallet service that points to your ecosystem service. You should have received this URL with your ecosystem setup. In your <code>Program.cs</code> file add the following line replacing the placeholder with your URL:</p> <pre><code>using Trinsic;\n\nvar walletService = new WalletService(\"&lt;ECOSYSTEM SERVICE URL&gt;\");</code></pre>","title":"Configure services"},{"location":"walkthrough/vaccination-net/#setup-wallet-profiles","text":"<p>Let's create three different profiles, each pointing to a separate wallet. Since we are using a single console app for this demo, we will simply set the active profile before each interaction to designate which actor is currently taking action. To create a new wallet profile, we use the Create Wallet feature.</p> <pre><code>var allison = await walletService.CreateWallet();\nvar clinic = await walletService.CreateWallet();\nvar airline = await walletService.CreateWallet();</code></pre> <p>If you would like to save the profile for future use, you can simply export the serialized profile to a local storage. Please note that the profiles contain sensitive key data, so they should be stored in a secure enclave.</p> <pre><code>using Google.Protobuf;\nusing System.IO;\n\n// Serialize profile by exporting the binary protobuf form\nFile.WriteAllBytes(\"allison.bin\", allison.ToByteString().ToByteArray());\n\n// Create profile from existing data\nvar allison = WalletProfile.Parser.ParseFrom(File.ReadAllBytes(\"allison.bin\"));</code></pre> <p>Read more about security profiles and authentication.</p>","title":"Setup wallet profiles"},{"location":"walkthrough/vaccination-net/#certificate-issuance","text":"<p>Upon receiving her vaccine, Allison also receives a digital certificate from the clinic. This certificate is digitally signed by the clinic, acting as an issuer. The certificate is in a JSON form, and for this example, we will use the following JSON. Add this file to your project named <code>vaccination-certificate-unsigned.jsonld</code>.</p> vaccination-certificate-unsigned.jsonld <pre><code>{\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/vaccination/v1\",\n        \"https://w3id.org/security/bbs/v1\"\n    ],\n    \"id\": \"urn:uvci:af5vshde843jf831j128fj\",\n    \"type\": [\n        \"VaccinationCertificate\",\n        \"VerifiableCredential\"\n    ],\n    \"description\": \"COVID-19 Vaccination Certificate\",\n    \"name\": \"COVID-19 Vaccination Certificate\",\n    \"expirationDate\": \"2029-12-03T12:19:52Z\",\n    \"issuanceDate\": \"2019-12-03T12:19:52Z\",\n    \"issuer\": \"did:key:zUC724vuGvHpnCGFG1qqpXb81SiBLu3KLSqVzenwEZNPoY35i2Bscb8DLaVwHvRFs6F2NkNNXRcPWvqnPDUd9ukdjLkjZd3u9zzL4wDZDUpkPAatLDGLEYVo8kkAzuAKJQMr7N2\",\n    \"credentialSubject\": {\n        \"id\": \"urn:uuid:c53e70f8-ce9a-4576-8744-e5f85c20a743\",\n        \"type\": \"VaccinationEvent\",\n        \"batchNumber\": \"1183738569\",\n        \"countryOfVaccination\": \"US\"\n    }\n}</code></pre>   <p>Let's set the active profile to the clinic, and call the issuance endpoint</p> <pre><code>// Set active profile to 'clinic' so we can issue credential signed\n// with the clinic's signing keys\nwalletService.SetProfile(clinic);\n\n// Read the JSON credential data\nvar credentialJson = File.ReadAllText(\"./vaccination-certificate-unsigned.jsonld\");\n\n// Sign the credential using BBS+ signature scheme\nvar credential = await walletService.IssueCredential(document: JObject.Parse(credentialJson));</code></pre> <p>At this point, the clinic can send the signed credential to Allison using any available methods. These methods can include any message exchange protocol, or a custom transport. In this case, we'll assume that the credential was delivered to Allison in an offline environment.</p>","title":"Certificate issuance"},{"location":"walkthrough/vaccination-net/#store-certificate-in-personal-wallet","text":"<p>Allison can store this credential in her cloud wallet, simply by calling the Insert Item function.</p> <pre><code>// Set active profile to 'allison' so we can manage her cloud wallet\nwalletService.SetProfile(allison);\n\n// Insert the signed credential\nvar itemId = await walletService.InsertItem(credential);</code></pre>","title":"Store certificate in personal wallet"},{"location":"walkthrough/vaccination-net/#proof-of-vaccination","text":"<p>Before boarding an airplane, Allison must show a proof of vaccination. The request for this proof also comes in a form of JSON, in this case a JSON-LD frame. This request can be communicated using any exchange protocol. Again, we'll assume this was done offline.</p> <p>Let's save this request in a file named <code>vaccination-certificate-frame.jsonld</code></p> vaccination-certificate-frame.jsonld <pre><code>{\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/vaccination/v1\",\n        \"https://w3id.org/security/bbs/v1\"\n    ],\n    \"type\": [\n        \"VerifiableCredential\",\n        \"VaccinationCertificate\"\n    ],\n    \"@explicit\": true,\n    \"issuer\": {},\n    \"credentialSubject\": {\n        \"@explicit\": true,\n        \"@type\": \"VaccinationEvent\",\n        \"batchNumber\": {},\n        \"countryOfVaccination\": {}\n    }\n}</code></pre>   <p>This request asks Allison to provide proof of valid vaccination certificate, including the <code>issuer</code>, <code>batchNumber</code>and <code>countryOfVaccination</code> fields.</p> <p>Allison can use the Create Proof functions to build a proof that will share only the requested fields.</p> <pre><code>// We'll read the request frame from a file and communicate this with Allison\nvar proofRequestJson = File.ReadAllText(\"./vaccination-certificate-frame.jsonld\");\n\n// Set the active profile to 'allison'\nwalletService.SetProfile(allison);\n\n// Build a proof for the given request and the `itemId` we previously received\n// which points to the stored credential\nvar credentialProof = await walletService.CreateProof(itemId, JObject.Parse(proofRequestJson));</code></pre>","title":"Proof of vaccination"},{"location":"walkthrough/vaccination-net/#verification","text":"<p>Allison shares the proof of credential she created with the airline. The airline can now use Verify Proof functions to check the validity of the proof.</p> <pre><code>// Set active profile to 'airline'\nwalletService.SetProfile(airline);\n\n// Check for valid signature\nvar valid = await walletService.VerifyProof(credentialProof);</code></pre>","title":"Verification"},{"location":"walkthrough/vaccination-net/#complete-sample-code","text":"<p>This sample is available in our GitHub repo. You can also simply run the code using Replit and inspect the results.</p> Run example in Replit<p></p>","title":"Complete sample code"},{"location":"walkthrough/vaccination-node/","text":"<p>In this walkthrough we will showcase a practical example of how participants in an ecosystem use verifiable data to exchange trusted bits of information.</p>","title":"Vaccination Use Case for Node.js"},{"location":"walkthrough/vaccination-node/#ecosystem-setup","text":"<p>Before we begin, please ensure that you have access to our beta environment. If you haven't yet, join our early adopter program and we'll get in touch.</p>","title":"Ecosystem setup"},{"location":"walkthrough/vaccination-node/#use-case-overview","text":"<p>In this walkthrough we'll explore a scenario where Allison gets her vaccination certificate. She then uses this certificate to board an airline that requires proof of vaccination. Each participant in this scenario is part of the same ecosystem, though this is not a functional requirement.</p> <pre><code>journey\n    section Issuance\n      Obtain cert.: 3: Allison, Clinic\n      Store in wallet: 3: Allison\n    section Verification\n      Request cert.: 3: Allison, Airline\n      Share: 3: Allison\n      Verify: 5: Airline</code></pre> <p>If you haven't learned about verifiable credentials already, first read Verifiable Credential Basics.</p> <p>In most credential exchange scenarios there are three primary roles - Issuer, Holder, and Verifier.</p> <p>Issuer: Responsible for issuing signed credentials that attest information about a credential subject</p> <p>Holder: Stores issued credentials from an issuer. Most often this is the credential subject. Also generates passes to share with verifiers.</p> <p>Verifier: Verifies passes presented from holders.</p>","title":"Use case overview"},{"location":"walkthrough/vaccination-node/#technical-requirements","text":"<p>You can run this example on your local machine, or you can use our Gitpod setup to bootstrap a full development environment. If running locally, you only need node and npm installed on your machine and a code editor of your choice.</p>","title":"Technical requirements"},{"location":"walkthrough/vaccination-node/#create-new-project","text":"<p>Let's create a new console app that we will use to add our sample code</p> <pre><code>mkdir VaccinationSample &amp;&amp; cd VaccinationSample &amp;&amp; npm init</code></pre> <p>You can select all the defaults for the node project.</p> <p>Add the required dependencies</p> <pre><code>npm i @trinsic/trinsic</code></pre>","title":"Create new project"},{"location":"walkthrough/vaccination-node/#configure-services","text":"<p>Create a reference to the wallet service that points to your ecosystem service. You should have received this URL with your ecosystem setup. In your <code>index.js</code> file add the following line replacing the placeholder with your URL:</p> <pre><code>const { WalletService } = require('@trinsic/trinsic')\n\nconst walletService = new WalletService(\"&lt;ECOSYSTEM SERVICE URL&gt;\");</code></pre>","title":"Configure services"},{"location":"walkthrough/vaccination-node/#setup-wallet-profiles","text":"<p>Let's create three different profiles, each pointing to a separate wallet. Since we are using a single console app for this demo, we will simply set the active profile before each interaction to designate which actor is currently taking action. To create a new wallet profile, we use the Create Wallet feature.</p> <pre><code>let allison = await walletService.createWallet();\nlet clinic = await walletService.createWallet();\nlet airline = await walletService.createWallet();</code></pre> <p>If you would like to save the profile for future use, you can simply export the serialized profile to a local storage. Please note that the profiles contain sensitive key data, so they should be stored in a secure enclave.</p> <pre><code>const fs = require('fs');\nconst { Struct } = require('google-protobuf/google/protobuf/struct_pb');\n\n// Serialize profile by exporting the binary protobuf form\nfs.writeFileSync(\"allison.bin\", allison.serializeBinary());\n\n// Create profile from existing data\nlet profile = fs.readFileSync(\"allison.bin\");\nlet allison = WalletProfile.deserializeBinary(profile);</code></pre>  <p>Loading Profiles</p> <p>In order to load a profile from a saved file you'll need to install google-protobuf with <code>npm i google-protobuf</code> in order to use the Struct class and convert the DID Document from JavaScript to the protobuf form.</p>  <p>Read more about security profiles and authentication.</p>","title":"Setup wallet profiles"},{"location":"walkthrough/vaccination-node/#certificate-issuance","text":"<p>Upon receiving her vaccine, Allison also receives a digital certificate from the clinic. This certificate is digitally signed by the clinic, acting as an issuer. The certificate is in a JSON form, and for this example, we will use the following JSON. Add this file to your project named <code>vaccination-certificate-unsigned.jsonld</code>.</p> vaccination-certificate-unsigned.jsonld <pre><code>{\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/vaccination/v1\",\n        \"https://w3id.org/security/bbs/v1\"\n    ],\n    \"id\": \"urn:uvci:af5vshde843jf831j128fj\",\n    \"type\": [\n        \"VaccinationCertificate\",\n        \"VerifiableCredential\"\n    ],\n    \"description\": \"COVID-19 Vaccination Certificate\",\n    \"name\": \"COVID-19 Vaccination Certificate\",\n    \"expirationDate\": \"2029-12-03T12:19:52Z\",\n    \"issuanceDate\": \"2019-12-03T12:19:52Z\",\n    \"issuer\": \"did:key:zUC724vuGvHpnCGFG1qqpXb81SiBLu3KLSqVzenwEZNPoY35i2Bscb8DLaVwHvRFs6F2NkNNXRcPWvqnPDUd9ukdjLkjZd3u9zzL4wDZDUpkPAatLDGLEYVo8kkAzuAKJQMr7N2\",\n    \"credentialSubject\": {\n        \"id\": \"urn:uuid:c53e70f8-ce9a-4576-8744-e5f85c20a743\",\n        \"type\": \"VaccinationEvent\",\n        \"batchNumber\": \"1183738569\",\n        \"countryOfVaccination\": \"US\"\n    }\n}</code></pre>   <p>Let's set the active profile to the clinic, and call the issuance endpoint</p> <pre><code>// Set active profile to 'clinic' so we can issue credential signed\n// with the clinic's signing keys\nwalletService.setProfile(clinic);\n\n// Read the JSON credential data\nlet credentialJson = fs.readFileSync(\"./vaccination-certificate-unsigned.jsonld\");\n\n// Sign the credential using BBS+ signature scheme\nlet credential = await walletService.issueCredential(JSON.parse(credentialJson));</code></pre> <p>At this point, the clinic can send the signed credential to Allison using any available methods. These methods can include any message exchange protocol, or a custom transport. In this case, we'll assume that the credential was delivered to Allison in an offline environment.</p>","title":"Certificate issuance"},{"location":"walkthrough/vaccination-node/#store-certificate-in-personal-wallet","text":"<p>Allison can store this credential in her cloud wallet, simply by calling the Insert Item function.</p> <pre><code>// Set active profile to 'allison' so we can manage her cloud wallet\nwalletService.setProfile(allison);\n\n// Insert the signed credential\nlet itemId = await walletService.insertItem(credential);</code></pre>","title":"Store certificate in personal wallet"},{"location":"walkthrough/vaccination-node/#proof-of-vaccination","text":"<p>Before boarding an airplane, Allison must show a proof of vaccination. The request for this proof also comes in a form of JSON, in this case a JSON-LD frame. This request can be communicated using any exchange protocol. Again, we'll assume this was done offline.</p> <p>Let's save this request in a file named <code>vaccination-certificate-frame.jsonld</code></p> vaccination-certificate-frame.jsonld <pre><code>{\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/vaccination/v1\",\n        \"https://w3id.org/security/bbs/v1\"\n    ],\n    \"type\": [\n        \"VerifiableCredential\",\n        \"VaccinationCertificate\"\n    ],\n    \"@explicit\": true,\n    \"issuer\": {},\n    \"credentialSubject\": {\n        \"@explicit\": true,\n        \"@type\": \"VaccinationEvent\",\n        \"batchNumber\": {},\n        \"countryOfVaccination\": {}\n    }\n}</code></pre>   <p>This request asks Allison to provide proof of valid vaccination certificate, including the <code>issuer</code>, <code>batchNumber</code>and <code>countryOfVaccination</code> fields.</p> <p>Allison can use the Create Proof functions to build a proof that will share only the requested fields.</p> <pre><code>// We'll read the request frame from a file and communicate this with Allison\nlet proofRequestJson = fs.readFileSync(\"./vaccination-certificate-frame.jsonld\");\n\n// Set the active profile to 'allison'\nwalletService.setProfile(allison);\n\n// Build a proof for the given request and the `itemId` we previously received\n// which points to the stored credential\nlet credentialProof = await walletService.createProof(itemId, JSON.parse(proofRequestJson));</code></pre>","title":"Proof of vaccination"},{"location":"walkthrough/vaccination-node/#verification","text":"<p>Allison shares the proof of credential she created with the airline. The airline can now use Verify Proof functions to check the validity of the proof.</p> <pre><code>// Set active profile to 'airline'\nwalletService.setProfile(airline);\n\n// Check for valid signature\nlet valid = await walletService.verifyProof(credentialProof);</code></pre>","title":"Verification"},{"location":"walkthrough/vaccination-node/#complete-sample-code","text":"<p>This sample is available in our GitHub repo.</p>","title":"Complete sample code"},{"location":"walkthrough/vaccination-python/","text":"<p>In this walkthrough we will showcase a practical example of how participants in an ecosystem use verifiable data to exchange trusted bits of information.</p>","title":"Walkthrough for Python"},{"location":"walkthrough/vaccination-python/#ecosystem-setup","text":"<p>Before we begin, please ensure that you have access to our beta environment. If you haven't yet, join our early adopter program and we'll get in touch.</p>","title":"Ecosystem setup"},{"location":"walkthrough/vaccination-python/#use-case-overview","text":"<p>In this walkthrough we'll explore a scenario where Allison gets her vaccination certificate. She then uses this certificate to board an airline that requires proof of vaccination. Each participant in this scenario is part of the same ecosystem, though this is not a functional requirement.</p> <pre><code>journey\n    section Issuance\n      Obtain cert.: 3: Allison, Clinic\n      Store in wallet: 3: Allison\n    section Verification\n      Request cert.: 3: Allison, Airline\n      Share: 3: Allison\n      Verify: 5: Airline</code></pre> <p>If you haven't learned about verifiable credentials already, first read Verifiable Credential Basics.</p> <p>In most credential exchange scenarios there are three primary roles - Issuer, Holder, and Verifier.</p> <p>Issuer: Responsible for issuing signed credentials that attest information about a credential subject</p> <p>Holder: Stores issued credentials from an issuer. Most often this is the credential subject. Also generates passes to share with verifiers.</p> <p>Verifier: Verifies passes presented from holders.</p>","title":"Use case overview"},{"location":"walkthrough/vaccination-python/#technical-requirements","text":"<p>You can run this example on your local machine, or you can use our Gitpod setup to bootstrap a full development environment. If running locally, you'll only need python 3 installed</p>","title":"Technical requirements"},{"location":"walkthrough/vaccination-python/#sample-project","text":"<p>Clone this sdk repository: </p> <p>In this project, we'll be following along the <code>trinsic_service_demo</code></p>","title":"Sample Project"},{"location":"walkthrough/vaccination-python/#configure-services","text":"<p>Create a reference to the wallet service that points to your ecosystem service. You should have received this URL with your ecosystem setup. </p> <pre><code>server_address = '&lt;SERVER_ADDRESS&gt;'\nwallet_service = WalletService(server_address)</code></pre>","title":"Configure services"},{"location":"walkthrough/vaccination-python/#setup-wallet-profiles","text":"<p>Let's create three different profiles, each pointing to a separate wallet. Since we are using a single console app for this demo, we will simply set the active profile before each interaction to designate which actor is currently taking action. To create a new wallet profile, we use the Create Wallet feature.</p> <pre><code>allison = await wallet_service.create_wallet()\nclinic = await wallet_service.create_wallet()\nairline = await wallet_service.create_wallet()</code></pre> <p>If you would like to save the profile for future use, you can simply export the serialized profile to a local storage. Please note that the profiles contain sensitive key data, so they should be stored in a secure enclave.</p> <pre><code>File.WriteAllBytes(\"allison.bin\", allison.ToByteString().ToByteArray());</code></pre> <p>Read more about security profiles and authentication.</p>","title":"Setup wallet profiles"},{"location":"walkthrough/vaccination-python/#certificate-issuance","text":"<p>Upon receiving her vaccine, Allison also receives a digital certificate from the clinic. This certificate is digitally signed by the clinic, acting as an issuer. The certificate is in a JSON form, and for this example, we will use the following JSON. Add this file to your project named <code>vaccination-certificate-unsigned.jsonld</code>.</p> vaccination-certificate-unsigned.jsonld <pre><code>{\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/vaccination/v1\",\n        \"https://w3id.org/security/bbs/v1\"\n    ],\n    \"id\": \"urn:uvci:af5vshde843jf831j128fj\",\n    \"type\": [\n        \"VaccinationCertificate\",\n        \"VerifiableCredential\"\n    ],\n    \"description\": \"COVID-19 Vaccination Certificate\",\n    \"name\": \"COVID-19 Vaccination Certificate\",\n    \"expirationDate\": \"2029-12-03T12:19:52Z\",\n    \"issuanceDate\": \"2019-12-03T12:19:52Z\",\n    \"issuer\": \"did:key:zUC724vuGvHpnCGFG1qqpXb81SiBLu3KLSqVzenwEZNPoY35i2Bscb8DLaVwHvRFs6F2NkNNXRcPWvqnPDUd9ukdjLkjZd3u9zzL4wDZDUpkPAatLDGLEYVo8kkAzuAKJQMr7N2\",\n    \"credentialSubject\": {\n        \"id\": \"urn:uuid:c53e70f8-ce9a-4576-8744-e5f85c20a743\",\n        \"type\": \"VaccinationEvent\",\n        \"batchNumber\": \"1183738569\",\n        \"countryOfVaccination\": \"US\"\n    }\n}</code></pre>   <p>Let's set the active profile to the clinic, and call the issuance endpoint</p> <pre><code>def vaccine_cert_unsigned_path(self) -&gt; str:\n    return abspath(join(dirname(__file__), \"vaccination-certificate-unsigned.jsonld\"))\n\nwallet_service.set_profile(clinic)\nwith open(self.vaccine_cert_unsigned_path, \"r\") as fid:\n    credential_json = json.load(fid)\n\ncredential = await wallet_service.issue_credential(credential_json)</code></pre> <p>At this point, the clinic can send the signed credential to Allison using any available methods. These methods can include any message exchange protocol, or a custom transport. In this case, we'll assume that the credential was delivered to Allison in an offline environment.</p>","title":"Certificate issuance"},{"location":"walkthrough/vaccination-python/#store-certificate-in-personal-wallet","text":"<p>Allison can store this credential in her cloud wallet, simply by calling the Insert Item function.</p> <pre><code>wallet_service.set_profile(allison)\nitem_id = await wallet_service.insert_item(credential)</code></pre>","title":"Store certificate in personal wallet"},{"location":"walkthrough/vaccination-python/#proof-of-vaccination","text":"<p>Before boarding an airplane, Allison must show a proof of vaccination. The request for this proof also comes in a form of JSON, in this case a JSON-LD frame. This request can be communicated using any exchange protocol. Again, we'll assume this was done offline.</p> <p>Let's save this request in a file named <code>vaccination-certificate-frame.jsonld</code></p> vaccination-certificate-frame.jsonld <pre><code>{\n    \"@context\": [\n        \"https://www.w3.org/2018/credentials/v1\",\n        \"https://w3id.org/vaccination/v1\",\n        \"https://w3id.org/security/bbs/v1\"\n    ],\n    \"type\": [\n        \"VerifiableCredential\",\n        \"VaccinationCertificate\"\n    ],\n    \"@explicit\": true,\n    \"issuer\": {},\n    \"credentialSubject\": {\n        \"@explicit\": true,\n        \"@type\": \"VaccinationEvent\",\n        \"batchNumber\": {},\n        \"countryOfVaccination\": {}\n    }\n}</code></pre>   <p>This request asks Allison to provide proof of valid vaccination certificate, including the <code>issuer</code>, <code>batchNumber</code>and <code>countryOfVaccination</code> fields.</p> <p>Allison can use the Create Proof functions to build a proof that will share only the requested fields.</p> <pre><code>def vaccine_cert_frame_path(self) -&gt; str:\n    return abspath(join(dirname(__file__), \"vaccination-certificate-frame.jsonld\"))\n\nwith open(self.vaccine_cert_frame_path, \"r\") as fid2:\n            proof_request_json = json.load(fid2)\n\ncredential_proof = await wallet_service.create_proof(document_id=item_id, reveal_document=proof_request_json)</code></pre>","title":"Proof of vaccination"},{"location":"walkthrough/vaccination-python/#verification","text":"<p>Allison shares the proof of credential she created with the airline. The airline can now use Verify Proof functions to check the validity of the proof.</p> <pre><code>wallet_service.set_profile(airline)\nvalid = await wallet_service.verify_proof(credential_proof)</code></pre>","title":"Verification"},{"location":"walkthrough/vaccination-python/#complete-sample-code","text":"<p>This sample is available in our GitHub repo.</p>","title":"Complete sample code"},{"location":"walkthrough/snippets/intro-infrastructure/","text":"<p>In this walkthrough we will showcase a practical example of how participants in an ecosystem use verifiable data to exchange trusted bits of information.</p>","title":"Intro infrastructure"},{"location":"walkthrough/snippets/intro-infrastructure/#ecosystem-setup","text":"<p>Before we begin, please ensure that you have access to our beta environment. If you haven't yet, join our early adopter program and we'll get in touch.</p>","title":"Ecosystem setup"},{"location":"walkthrough/snippets/intro-use-case/","text":"","title":"Intro use case"},{"location":"walkthrough/snippets/intro-use-case/#use-case-overview","text":"<p>In this walkthrough we'll explore a scenario where Allison gets her vaccination certificate. She then uses this certificate to board an airline that requires proof of vaccination. Each participant in this scenario is part of the same ecosystem, though this is not a functional requirement.</p> <pre><code>journey\n    section Issuance\n      Obtain cert.: 3: Allison, Clinic\n      Store in wallet: 3: Allison\n    section Verification\n      Request cert.: 3: Allison, Airline\n      Share: 3: Allison\n      Verify: 5: Airline</code></pre> <p>If you haven't learned about verifiable credentials already, first read Verifiable Credential Basics.</p> <p>In most credential exchange scenarios there are three primary roles - Issuer, Holder, and Verifier.</p> <p>Issuer: Responsible for issuing signed credentials that attest information about a credential subject</p> <p>Holder: Stores issued credentials from an issuer. Most often this is the credential subject. Also generates passes to share with verifiers.</p> <p>Verifier: Verifies passes presented from holders.</p>","title":"Use case overview"}]}